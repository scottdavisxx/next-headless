import Head from 'next/head'
import Image from 'next/image'

import { ApolloClient,
         InMemoryCache, 
        ApolloProvider, 
        useQuery, 
        gql
} from '@apollo/client';

import styles from '../styles/Home.module.css'

export default function Home( posts ) {
  console.log('posts', posts);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          {posts.posts.map(post => {
            return(
              <a key={post.title} href="#" className={styles.card}>
                <h2>{post.title}</h2>
                {/* <p>{post.content}</p> */}
              </a>
            )
          })}
          
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps() { 
  const client = new ApolloClient({
    uri: 'https://dev-we-headless.pantheonsite.io/graphql',
    cache: new InMemoryCache(),
  });

  const response = await client.query({
    query: gql`
      query MyQuery {
        posts {
          edges {
            node {
              title
              uri
              excerpt
              content
            }
          }
        }
      }
    `
  });

const posts = response.data.posts.edges.map(({ node }) => node);

  return {
    props: {
      posts
    }
  }
}
